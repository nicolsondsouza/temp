{"version":3,"file":"/packages/mini-models.js","sources":["mini-models/lib/mini-models.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,CAAO;CAEL,EAAa,MAAZ,CAAD;CACG,EAAgB,CAAhB,OAAD,GAAiB;CADnB,EAAa;;CAAb,CAGA,CAAY,MAAX;AACE,CAAD,GAAY,GAAX,EAAU,EAAX;CAJF,EAGY;;CAHZ,CAMA,CAAY,MAAX;CACC;AAAgC,CAAhC,MAAgC;CAAhC,EAAU,GAAV;CAAU,CAAQ,GAAP,EAAD,CAAC;CAAX;;EACwB,CAAZ,CAAZ,GAAmB,EAAnB,CAAwB;CACxB,MAAgD;CAAhD,GAAmC,CAAlB,EAAO,EAAP,IAAV;KAFP;CADU,UAIV;CAVF,EAMY;;CANZ,CAYA,CAAY,MAAX;CACC,EAAmB,CAAnB,GAAO;CACC,CAAI,CAAZ,CAAe,EAAf,CAAO,GAAK,CAAZ,GAAY;CAdd,EAYY;;CAMC,kBAAC;CACZ,CAAe,CAAf;CAnBF,EAkBa;;CAlBb,EAqBS,IAAT,EAAS;CACP;;EAC2C,EAA3C,KAAiB,EAAY,GAAc;CACxC,CAAsB,EAAvB,CAAuB,IAAC,CAAD,GAAvB;CACE;GAAa,EAAX,GAAF;GACO,CAAP,MAAiB;CADjB,EAEU,IAAV,GAAoB;CAGpB,GAAG,CAAoC,GAAvC,EAAwB;AACe,CAArC;GAAU,CAAV,CAAU,EAAV;;AACiC,CAAjC,IAAmC,KAAnC;CAAC,CAAgB,GAAhB,EAAD;WAFF;CAKS,GAAD,CAAsB,CAL9B,CAKQ,GALR;AAM0D,CAAxD;GAAU,CAAmB,CAAnB,EAAV;;AACiC,CAAjC,CAAsD,EAAtD,CAAmC,KAAnC;CAAC,CAAgB,GAAhB,EAAD;WAPF;CAUS,GAAD,EAVR;AAWqC,CAAnC;GAAU,IAAV;;AACiC,CAAjC,IAAwC,KAAxC;CAAC,CAAgB,GAAhB,EAAD;WAZF;SANqB;CAAvB,MAAuB;CADzB,IAA2C;CAqB3C,MAAgB,EAAU;CAA1B,YAAO;KAtBP;CADO,UAwBP;CA7CF,EAqBS;;CArBT,EA+CW,MAAX;CACG,QAAS,EAAV;CAAiC,CAAQ,CAAR,CAAE;CAAF,CAAqB,GAAP;CADtC,KACT;CAhDF,EA+CW;;CA/CX,EAkDW,MAAX;CACG,QAAS,EAAV;CAAiC,CAAQ,CAAR,CAAE;CAAF,CAAqB,GAAP;CADtC,KACT;CAnDF,EAkDW;;CAlDX,EAqDW,MAAX;CACG,QAAS,EAAV;CAAiC,CAAQ,CAAR,CAAE;CAAF,CAAsB,IAAR;CADtC,KACT;CAtDF,EAqDW;;CArDX,CAwDkB,CAAR,KAAV,CAAW;CACT;GAAS,CAAT,KAAS;CAAT,EACkB,CAAlB,CAAO;CADP,GAEA,CAAO,EAAP;CACC,KAAD;CA5DF,EAwDU;;CAxDV,EA8DU,KAAV,CAAW,CAAD;CACR,MAAiB;CAAjB,YAAO;KAAP;CADQ,UAER;CAhEF,EA8DU;;CA9DV,CAkEwB,CAAb,MAAX,CAAW;AACY,CAArB,OAAqB;CAArB,YAAO;KAAP;CACA,EAAqC,CAArC,EAAiB,IAAU;CAA3B,YAAO;KADP;CADS,UAGT;CArEF,EAkEW;;CAlEX,CAuEwB,CAAb,MAAX,CAAW;AACY,CAArB,OAAqB;CAArB,YAAO;KAAP;CACA,EAAqC,CAArC,EAAiB,IAAU;CAA3B,YAAO;KADP;CADS,UAGT;CA1EF,EAuEW;;CAvEX,EA4EM,CAAN,KAAM;CACJ;AAAqB,CAArB,MAAqB;CAArB,YAAO;KAAP;IAEA;CAFA,CAGO,EAAP,EAAO;CACP;AACE,IAAW,EAAX;EACiD,CAAjD,CAAC,EAAD,GAAU,CAAV,CAAsB;MAFxB;CAIE,GAAC,EAAD,GAAiB,CAAV,CAAsB;KAR/B;CASC,UAAD;CAtFF,EA4EM;;CA5EN,EAwFS,IAAT,EAAS;CACP;GACA,MAAU,CAAV,CAAsB;CACrB,UAAD;CA3FF,EAwFS;;CAxFT,EA6FgB,MAAC,KAAjB;CACE;CAAC,CAAD,CAA+C,CAA/C,IAA8B,CAAb,EAAjB;CACO,GAAL;CADF,IAA+C;CA9FjD,EA6FgB;;CA7FhB;;CAFF;A","sourcesContent":["class @MiniModel\n  # CLASS METHODS\n  @collection: ->\n    @_collection ||= eval(@collectionName)\n  \n  @hasErrors: (options) ->\n    !_.isEmpty @getErrors(options)\n  \n  @getErrors: (options) ->\n    options = {field: options}  if !_.isObject options\n    allErrors = Session.get(\"#{@collectionName}:errors:#{options.uuid}\") || {}\n    return allErrors[options.field] || [] if options.field\n    allErrors \n  \n  @setErrors: (options) ->\n    options.errors ||= {}\n    Session.set(\"#{@collectionName}:errors:#{options.uuid}\", options.errors)\n  \n  \n  # OBJECT METHODS\n  constructor: (doc) ->\n    _.extend this, doc\n  \n  isValid: ->\n    @setErrors({})\n    _.each @__proto__.constructor.validations, (validationRule) =>\n      _.each validationRule, (validation, field) =>\n        @[field] ||= null\n        rule = validation.rule || validation\n        message = validation.message\n        \n        # {title: 'notEmpty'}\n        if _.isString(rule) and _.isFunction(@[rule])\n          message = field + \" \" + rule  unless message\n          @addError field, message  unless @[rule](@[field])\n      \n        # {title: ['minLength', 5]}\n        else if _.isArray(rule) and @[rule[0]]\n          message = field + \" \" + rule[0] + \" \" + rule[1]  unless message\n          @addError field, message  unless @[rule[0]](@[field], rule[1])\n      \n        # rule defined as function\n        else if _.isFunction(rule)\n          message = field + \" error\"  unless message\n          @addError field, message  unless rule(@[field])\n          \n    return true  if _.isEmpty(@getErrors())\n    false\n  \n  hasErrors: (field) ->\n    @__proto__.constructor.hasErrors { uuid: @_id, field: field }\n    \n  getErrors: (field) ->\n    @__proto__.constructor.getErrors { uuid: @_id, field: field }\n    \n  setErrors: (errors) ->\n    @__proto__.constructor.setErrors { uuid: @_id, errors: errors }\n    \n  addError: (field, message) ->\n    errors = @getErrors()\n    errors[field] ||= []\n    errors[field].push message\n    @setErrors(errors)\n    \n  notEmpty: (fieldValue) ->\n    return false  if _.isEmpty(fieldValue)\n    true\n    \n  maxLength: (fieldValue, length) ->\n    return false  unless _.isString fieldValue\n    return false  if fieldValue.length > length\n    true\n    \n  minLength: (fieldValue, length) ->\n    return false  unless _.isString fieldValue\n    return false  if fieldValue.length < length\n    true\n    \n  save: ->\n    return false  unless @isValid()\n    \n    @_applyCallback(\"beforeSave\")\n    data = _.extend({}, @)\n    if data._id\n      delete data._id\n      @__proto__.constructor.collection().update @_id, data\n    else\n      @_id = @__proto__.constructor.collection().insert data\n    @_applyCallback(\"afterSave\")\n\n  destroy: ->\n    @_applyCallback(\"beforeDestroy\")\n    @__proto__.constructor.collection().remove @_id\n    @_applyCallback(\"afterDestroy\")\n    \n  _applyCallback: (callback)->\n    _.each @__proto__.constructor[callback] || [], (cbck) =>\n      cbck(@)\n      "]}