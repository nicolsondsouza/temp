{"version":3,"file":"/packages/npm.js","sources":["npm/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,0C;AACA,W;;AAEA,uC;AACA,uC;AACA,gB;AACA,E;;AAEA,sD;AACA,4B;AACA,mB;AACA,c;;AAEA,yB;AACA,uB;AACA,gC;AACA,iB;AACA,mB;AACA,yB;AACA,oB;AACA,U;;AAEA,wB;AACA,iC;AACA,uB;AACA,gB;AACA,+B;AACA,0B;AACA,S;AACA,O;AACA,K;AACA,Q;;AAEA,gB;AACA,c;AACA,E;AACA,iB;AACA,E;;AAEA,mC;AACA,iC;AACA,oB;AACA,8B;AACA,iE;AACA,mB;AACA,wB;AACA,iD;AACA,gE;AACA,mB;AACA,4B;AACA,yC;AACA,U;AACA,iD;AACA,G;;AAEA,0C;AACA,uB;AACA,6C;AACA,yB;AACA,2C;AACA,iD;AACA,c;AACA,mE;AACA,O;AACA,O;AACA,qB;AACA,G;;AAEA,+B;AACA,uB;AACA,2B;AACA,6C;AACA,8C;AACA,+B;AACA,S;;AAEA,0B;AACA,6B;AACA,c;AACA,+B;AACA,O;AACA,M;AACA,G;AACA,E","sourcesContent":["var Future = Npm.require('fibers/future');\nAsync = {};\n\nMeteor.require = function(moduleName) {\n  var module = Npm.require(moduleName);\n  return module;\n};\n\nAsync.runSync = Meteor.sync = function(asynFunction) {\n  var future = new Future();\n  var sent = false;\n  var payload;\n\n  setTimeout(function() {\n    asynFunction(done);\n    function done(err, result) {\n      if(!sent) {\n        payload = {\n          result: result,\n          error: err\n        };\n\n        if(future.ret) {\n          //for 0.6.4.1 and older\n          future.ret();\n        } else {\n          //for 0.6.5 and newer\n          future.return();\n        }\n      }\n    }\n  }, 0);\n\n  future.wait();\n  sent = true;\n  \n  return payload;\n};\n\nAsync.wrap = function(arg1, arg2) {\n  if(typeof arg1 == 'function') {\n    var func = arg1;\n    return wrapFunction(func);\n  } else if(typeof arg1 == 'object' && typeof arg2 == 'string') {\n    var obj = arg1;\n    var funcName = arg2;\n    return wrapObject(obj, [funcName])[funcName];\n  } else if(typeof arg1 == 'object' &&  arg2 instanceof Array) {\n    var obj = arg1;\n    var funcNameList = arg2;\n    return wrapObject(obj, funcNameList);\n  } else {\n    throw new Error('unsupported argument list');\n  }\n\n  function wrapObject(obj, funcNameList) {\n    var returnObj = {};\n    funcNameList.forEach(function(funcName) {\n      if(obj[funcName]) {\n        var func = obj[funcName].bind(obj);\n        returnObj[funcName] = wrapFunction(func);\n      } else {\n        throw new Error('instance method not exists: ' + funcName);\n      }\n    });\n    return returnObj;\n  }\n\n  function wrapFunction(func) {\n    return function() {\n      var args = arguments;\n      response = Meteor.sync(function(done) {\n        Array.prototype.push.call(args, done);\n        func.apply(null, args);\n      });\n\n      if(response.error) {\n        throw response.error;\n      } else {\n        return response.result;\n      }\n    };\n  }\n};\n"]}