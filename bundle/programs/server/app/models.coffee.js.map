{"version":3,"file":"/models.coffee.js","sources":["models.coffee"],"names":[],"mappings":";AAAA;;;;AAAM,CAAN;CACE;;;;;;;GAAS,EAAR,CAAD,EAAS,CAAC;CACR;OAAM;CACN;CACE,CAA+B,EAA9B,EAAD;CACA,EAAU,UAAH;MAFT;CAIG,CAA8B,EAA9B,EAAD;KANK;CAAT,EAAS;;CAAT;;CADkB;;AAuBpB,CAvBA,CAuB8C,CAA9B,CAAf,EAAqB,EAAtB,EAAgB;CAA8B,EAAW,MAAX;CAAgC,EAAR;CAAxB,EAAW;CAvBzD,CAuBgB;;AACV,CAxBN,GAwBO;CACL;;;;;;;GAAiB,IAAhB,GAAD;;GACY,OAAZ;CACG,KAAD;CAFF,EACY;;CADZ,CAGuB,CAAR,MAAC,IAAhB;CACE;;GADyC,GAAX;KAC9B;EAAS,EAAT,OAAS;CAAT,EACe,CAAf,IAAuB,IAAvB;CAA6B,CAAS,IAAT;CAAiB,IAA/B;CAEN,KAAT,EAAQ,GAAR;CACE,CAAW,CAAX,CAAY,EAAZ;EACM,EAAN;CADA,CAEO,GAAP;CAFA,CAGQ,IAAR,EAHA;EAIU,IAAV;CAJA,CAKW,GALX,CAKA;CALA,CAMS,IAAT;CANA,CAOW,IAAX,MAPA;EAQU,IAAV;CARA,CAUE,IADF;CACE,CAAM,EAAN,EAAY,EAAZ;EACM,EAAN,EAAY,EAAZ;OAXF;CALW,KAIb;CAPF,EAGe;;CAHf;;CADqB;;AA2BvB,CAnDA,CAmD4C,CAA7B,CAAd,EAAoB,CAArB,EAAe;CAA6B,EAAW,MAAX;CAA8B,EAAN;CAAxB,EAAW;CAnDvD,CAmDe;;AACT,CApDN,GAoDO;CACL;;;;;;;GAAiB,EAAhB,IAAD;;GACiB,YAAjB;CACW,GAAT,IAAQ,GAAR;CAAc,CAAM,EAAN;CAAM,CAAK,CAAL,CAAM,IAAN;OAAN;CADC,KACf;CAFF,EACiB;;CADjB,CAGA,CAAqB,EAApB,EAAoB,EAAC,SAAtB;CACW,GAAT,IAAQ,GAAR;CAAc,CAAM,EAAN;CAAM,CAAK,CAAL,EAAK,GAAL,OAAK;OAAX;CADK,KACnB;CAJF,EAGqB;;CAHrB;;CADmB;;AAWrB,CA/DA,CA+D8C,CAA9B,CAAf,EAAqB,EAAtB,EAAgB;CAA8B,EAAW,MAAX;CAAgC,EAAR;CAAxB,EAAW;CA/DzD,CA+DgB;;AACV,CAhEN,GAgEO;CACL;;;;;;;GAAiB,IAAhB,GAAD;;GACY,OAAZ;CACE;;CACE,GAAQ,SAAD;KADT;EAEM,CAAN,EAAM,CAAgB,CAAhB,EAFN;CAGA;CACE,CAAM,CAAN;KAJF;CAKA,UAAO;CAPT,EACY;;CADZ;;CADqB;;AAevB,CA/EA,CA+E4C,CAA7B,CAAd,EAAoB,CAArB,EAAe;CAA6B,EAAW,MAAX;CAAgC,EAAR;CAAxB,EAAW;CA/EvD,CA+Ee;;AACT,CAhFN,GAgFO;CACL;;;;;;;GAAiB,GAAhB,GAAD;;EACA,CAAc,GAAb,GAAc,CAAD,CAAd;CACE;MAAY;CAAQ,CAAC;CAArB,CAA8B,IAAxB;CAAN,EACA,IAAa;AACT,CAAJ,EAAO,CAAP;CACE,CAAO,EAAP,GAAO;CAAyB,CAAM,EAAL;AAAY,CAAP,CAAM,EAAL;SAAP;CAAiB,GAA1C;CAAP,EACG,CAAH;CADA,CAE0B,CAA1B,CAAC,EAAD;KALF;CAMA,UAAO;CART,EACc;;CADd;;CADoB;;AAmBtB,CAnGA,EAmGa,CAAZ,CAAD,CAAmB,CAAN;;AAEb,CArGA,EAqGe,CAAd,EAAoB,CAArB,EAAe;A","sourcesContent":["class Model extends MiniModel\n  @upsert: (selector, modifier, callback) ->\n    obj = @collection().findOne selector\n    if obj\n      @collection().update selector, modifier, callback\n      return obj._id\n    else\n      @collection().insert modifier, callback\n\n# Schema\n#   asin - string\n#   url - string # url of the listing\n#   title - string\n#   imageUrl - string\n#   manufacturer - string (by)\n#   reviewsCount - int\n#   rating - decimal\n#   sellersCount - int\n#   price - decimal\n#   seller - string (buyBoxWinner)\n#   technicalDetails - [string]\n#   productDescription - [string]\n\n@Products = new Meteor.Collection 'products', transform: (doc) -> new Product doc\nclass @Product extends Model\n  @collectionName: 'Products'\n  hasDetails: ->\n    @technicalDetails || @seller || @productDetails\n  createListing: (price, baseSKU, original = false) ->\n    lister = Seller.getOrCreate @seller.id, @seller\n    baseSKUCount = Listings.find(baseSKU: baseSKU).count()\n\n    Listings.insert\n      productId: @_id\n      asin: @asin\n      price: price\n      status: 'Active'\n      quantity: 99\n      condition: 'New'\n      baseSKU: baseSKU\n      skuSuffix: baseSKUCount\n      original: original\n      lister:\n        name: lister.name\n        code: lister.code\n\n# Schema\n# category - string\n# keywords - string\n# matched_asins - [asin]\n\n@Queries = new Meteor.Collection 'queries', transform: (doc) -> new Query doc\nclass @Query extends Model\n  @collectionName: 'Queries'\n  matchedProducts: ->\n    Products.find asin: $in: @matched_asins\n  @allMatchedProducts: (queries) ->\n    Products.find asin: $in: _.chain(queries).pluck('matched_asins').flatten().union().value()\n\n# Schema\n# asin - string\n# user - (amazon seller id)\n\n@Listings = new Meteor.Collection 'listings', transform: (doc) -> new Listing doc\nclass @Listing extends Model\n  @collectionName: 'Listings'\n  computeSKU: ->\n    if @sku\n      return @sku\n    sku = \"#{@baseSKU}_CX#{@lister?.code}_#{@skuSuffix}\"\n    if @original\n      sku = \"#{sku}_OG\"\n    return sku\n\n# Schema\n# sellerID:\n# name:\n# url:\n\n@Sellers = new Meteor.Collection 'sellers', transform: (doc) -> new Listing doc\nclass @Seller extends Model\n  @collectionName: 'Sellers'\n  @getOrCreate: (id, attributes) ->\n    _id = Seller.upsert {id: id}, attributes\n    obj = Sellers.findOne(_id)\n    if !obj.code\n      code = @collection().findOne({},{sort:{code:-1}}).code || 1;\n      obj.code = code + 1\n      @collection().update _id, obj\n    return obj;\n\n\n# Schema for Users\n# merchant_id\n# marketplace_id\n# developer_account_id\n# aws_access_key_id\n# secret_key\n\n@Loads = new Meteor.Collection 'loads'\n\n@Results = new Meteor.Collection 'results'\n"]}