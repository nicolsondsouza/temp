{"version":3,"file":"/server/scraper.coffee.js","sources":["scraper.coffee"],"names":[],"mappings":";AAAA;;GAAS,GAAT,CAAS;;AACT,CADA,EACA,GAAY,CAAN;;AACN,CAFA,EAEQ,EAAR,CAAc,CAAM;;AAEpB,CAJA,EAIgB,MAAC,IAAjB;CACE;GAAa,CAAb,CAAsB,EAAtB,GAA8B;CAC9B,GAAG,GAAH;CAA2B,MAAX;IAAhB;WAA0C;GAF5B;;;AAIhB,CARA,EAQc,MAAC,EAAf;CACE;GAAa,CAAb,CAAsB,EAAtB;CACA,GAAG,GAAH;CAAyB,MAAT;IAAhB;WAAwC;GAF5B;;;AAId,CAZA,CAY6B,CAAR,CAApB,CAAoB,IAAC,QAAtB;CACE;;GADkC,CAAP;GAC3B;KAAa,EAAN,EAAM;CAAb,CACA,EAA4D,CAAK,GAA1D;CADP,CAGA,CAAI;CAEJ;WACE;EAAM,EAAN,OAAM;CAAN,CACM,EAAN;CADA,CAEK,CAAL,CAAK,EAAL;CAFA,CAGO,GAAP,EAAO;CAHP,CAIU,IAAV,MAAU;CAJV,CAKO,EAAc,CAArB,QAAO,CAAc;CALrB,CAMQ,EAAc,EAAtB,OAAQ,UAAc;CANtB,CAOc,EAAY,EAA1B,KAAc,CAAd;CAPA,CAQc,EAAY,EAA1B,KAAc,CAAd,kBAA0B;CATV;CAAlB,EAAkB;CANC;;AAiBrB,CA7BA,EA6BsB,CAArB,KAAsB,SAAvB;CACE;OAAO,oBAAM;CAAb,CACA,EADA,uBACO;CADP,CAGA,CAAI;CAHJ,CAIA,CAAoB,cAApB;CAJA,CAKA,eAAiB;CALjB,CAOA,CAAa,OAAb,gCAAa;CAPb,CAQA,CAAa,CAAI,MAAjB;CARA,CASA,CAAmB,aAAnB,QAAmB;CATnB,CAUA,CAAmB,CAAI,YAAvB;SAEA;EAAM,EAAN;EAEE,EADF;CACE,CAAM,EAAN,MAAgB;CAAhB,CACK,CAAL,KAAK,EAAU,cAAV;CADL,CAEA,EAAI,EAAJ,IAAc;MAJhB;EAME,EADF;CACE,CAAM,EAAN,YAAsB;CAAtB,CACK,CAAL,KAAK,QAAgB,QAAhB;MAPP;EAQkB,EAAlB,KAA0D,OAA1D,gBAAkB;CAA2C;CAA3C,IAAwC;CAR1D,CASgB,EAAhB,KAAiE,KAAjE,GAAiC,GAAjB;CACd,CAA+B,CAA/B;CADc,IAAiD;CATjE,CAWoB,EAApB,4CAAoB;CAxBA;;A","sourcesContent":["Future = Meteor.require 'fibers/future'\nURI = Meteor.require 'URIjs'\nscrap = Future.wrap Meteor.require 'scrap'\n\nparseFloatStr = (str) ->\n  matched = if str then _.first str.match /[0-9\\.]+/ else null\n  if matched then parseFloat(matched)  else null\n\nparseIntStr = (str) ->\n  matched = if str then _.first str.match /\\d+/ else null\n  if matched then parseInt(matched)  else null\n\n@scrapAmazonSearch = (query, page = 1) ->\n  console.log \"Scraping Amazon: #{query} page: #{page}\"\n  url = \"http://www.amazon.com/s/?rh=n:720576&field-keywords=#{query.split(' ').join('+')}&page=#{page}\"\n\n  $ = scrap(url).wait()\n\n  $('div.prod').map ->\n    rank: parseIntStr $(this).attr('id')\n    asin: $(this).attr('name')\n    url: $(this).find('h3 a').attr('href')\n    title: $(this).find('h3 a span').attr('title') or $(this).find('h3 a span').text()\n    imageUrl: $(this).find('.image img').attr('src')\n    price: parseFloatStr $(this).find('li.newp span').text()\n    rating: parseFloatStr $(this).find('.asinReviewsSummary a').attr('alt')\n    reviewsCount: parseIntStr $(this).find('.rvwCnt a').text()\n    sellersCount: parseIntStr $(this).find('.med.mkp2 a[href*=new] .grey').text()\n\n@scrapAmazonProduct = (asin) ->\n  console.log \"Scraping Amazon Product: #{asin}\"\n  url = \"http://www.amazon.com/dp/#{asin}\"\n\n  $ = scrap(url).wait()\n  productDetailsDiv = $('#detail-bullets').clone()\n  productDetailsDiv.find('script,style').remove()\n\n  sellerLink = $('#handleBuy table .buying:not([id]) > b a')\n  sellerPath = URI sellerLink.attr 'href'\n  manufacturerLink = $('#handleBuy > .buying a')\n  manufacturerPath = URI manufacturerLink.attr 'href'\n\n  asin: asin\n  seller:\n    name: sellerLink.text().trim()\n    url: sellerPath.absoluteTo('http://www.amazon.com/').toString()\n    id: sellerPath.search(true).seller\n  manufacturer:\n    name: manufacturerLink.text().trim()\n    url: manufacturerPath.absoluteTo('http://www.amazon.com/').toString()\n  technicalDetails: $('#technical-data .content ul li').map -> $(this).text().trim()\n  productDetails: productDetailsDiv.find('.content > ul > li').map ->\n    $(this).text().replace(/\\s+/g, ' ').trim()\n  productDescription: $('#productDescription .productDescriptionWrapper').text().trim()\n\n"]}